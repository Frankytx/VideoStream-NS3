/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation;
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */
 
#include "ns3/core-module.h"
#include "ns3/point-to-point-module.h"
#include "ns3/network-module.h"
#include "ns3/applications-module.h"
#include "ns3/wifi-module.h"
#include "ns3/mobility-module.h"
#include "ns3/csma-module.h"
#include "ns3/internet-module.h"
 
 
using namespace ns3;
 
NS_LOG_COMPONENT_DEFINE ("ScratchSimulator");
 
int
main (int argc, char *argv[])
{
  Time::SetResolution (Time::NS);
 
  bool verbose = true;
  uint32_t nWifi = 6; //
  bool tracing = false;
 
  CommandLine cmd;
  cmd.AddValue ("nWifi", "Number of wifi STA devices", nWifi);
  cmd.AddValue ("verbose", "Tell echo applications to log if true", verbose); 
 
  cmd.Parse (argc,argv);
 
 
  if (nWifi > 250)
    {
      std::cout << "Too many wifi or csma nodes, no more than 250 each." << std::endl;
      return 1;
    }
 
  if (verbose)
    {
      LogComponentEnable ("UdpEchoClientApplication", LOG_LEVEL_ALL);
      LogComponentEnable ("UdpEchoServerApplication", LOG_LEVEL_ALL);
    }
 
 
  NodeContainer wifiStaNodes;
  wifiStaNodes.Create (nWifi);  
  NodeContainer wifiApNode;
  wifiApNode.Create(1);   
   
  YansWifiChannelHelper channel = YansWifiChannelHelper::Default ();   
  YansWifiPhyHelper phy = YansWifiPhyHelper::Default ();  
  phy.SetChannel (channel.Create ());  
 
  WifiHelper wifi;
  wifi.SetRemoteStationManager ("ns3::AarfWifiManager");  
  WifiMacHelper mac; 
  Ssid ssid = Ssid ("ns-3-aqiao");  
  mac.SetType ("ns3::StaWifiMac",    
               "Ssid", SsidValue (ssid),   
               "ActiveProbing", BooleanValue (false));  
 
  NetDeviceContainer staDevices;
  staDevices = wifi.Install (phy, mac, wifiStaNodes);  
  mac.SetType ("ns3::ApWifiMac",  
               "Ssid", SsidValue (ssid));   
 
  NetDeviceContainer apDevices;
  apDevices = wifi.Install (phy, mac, wifiApNode);   
 
  
  MobilityHelper mobility; 
 
  mobility.SetPositionAllocator ("ns3::GridPositionAllocator",
                                 "MinX", DoubleValue (0.0),
                                 "MinY", DoubleValue (0.0),
                                 "DeltaX", DoubleValue (5.0),
                                 "DeltaY", DoubleValue (10.0),
                                 "GridWidth", UintegerValue (3),
                                 "LayoutType", StringValue ("RowFirst"));

    
  mobility.SetMobilityModel ("ns3::RandomWalk2dMobilityModel",   
                             "Bounds", RectangleValue (Rectangle (-50, 50, -50, 50)));   
  mobility.Install (wifiStaNodes);
   
  mobility.SetMobilityModel ("ns3::ConstantPositionMobilityModel");  
  mobility.Install (wifiApNode);
 
  InternetStackHelper stack;
  stack.Install (wifiApNode);
  stack.Install (wifiStaNodes);  
 
  Ipv4AddressHelper address;
 
  address.SetBase ("10.1.3.0", "255.255.255.0");
  Ipv4InterfaceContainer wifiInterfaces;
  wifiInterfaces=address.Assign (staDevices);
  address.Assign (apDevices);                 
 
  
  UdpEchoServerHelper echoServer (9);
 
  ApplicationContainer serverApps = echoServer.Install (wifiStaNodes.Get (0));
  serverApps.Start (Seconds (1.0));
  serverApps.Stop (Seconds (10.0));
 
  UdpEchoClientHelper echoClient (wifiInterfaces.GetAddress (0), 9);
  echoClient.SetAttribute ("MaxPackets", UintegerValue (5));
  echoClient.SetAttribute ("Interval", TimeValue (Seconds (1.0)));
  echoClient.SetAttribute ("PacketSize", UintegerValue (1024));
 
  ApplicationContainer clientApps =
    echoClient.Install (wifiStaNodes.Get (nWifi - 1));
  clientApps.Start (Seconds (2.0));
  clientApps.Stop (Seconds (10.0));
 
  Ipv4GlobalRoutingHelper::PopulateRoutingTables ();
 
  Simulator::Stop (Seconds (10.0));
 
  phy.EnablePcap ("wifiwifi", apDevices.Get (0));
 
  Simulator::Run ();
  Simulator::Destroy ();
  return 0;
}
